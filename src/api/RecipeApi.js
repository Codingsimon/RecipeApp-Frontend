/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Recipe from '../model/Recipe';

/**
* Recipe service.
* @module api/RecipeApi
* @version v0
*/
export default class RecipeApi {

    /**
    * Constructs a new RecipeApi. 
    * @alias module:api/RecipeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the add operation.
     * @callback module:api/RecipeApi~addCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new recipe
     * @param {module:api/RecipeApi~addCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    add(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/RecipeApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a recipe
     * @param {module:api/RecipeApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    callDelete(uuid, callback) {
      let postBody = null;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the edit operation.
     * @callback module:api/RecipeApi~editCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a recipe
     * @param {module:api/RecipeApi~editCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    edit(body, uuid, callback) {
      let postBody = body;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findAll operation.
     * @callback module:api/RecipeApi~findAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recipe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all recipes
     * @param {module:api/RecipeApi~findAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recipe>}
     */
    findAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [Recipe];

      return this.apiClient.callApi(
        '/recipe', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findOne operation.
     * @callback module:api/RecipeApi~findOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a recipe
     * @param {module:api/RecipeApi~findOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    findOne(uuid, callback) {
      let postBody = null;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the images operation.
     * @callback module:api/RecipeApi~imagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:api/RecipeApi~imagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recipe}
     */
    images(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Recipe;

      return this.apiClient.callApi(
        '/recipe/{uuid}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
